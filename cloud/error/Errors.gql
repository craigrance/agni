# id: ID
# sequenceNumber: Int
# createdDate: (Number)
# type: String
# action: String!
# deleteS3ObjectInputBucket: String
# deleteS3ObjectInputKey: String
# deleteS3ObjectInputVersionId: String
# screens_Mutation_ChangePosterId_Input_PosterId: String
# cognitoIdentityServiceProviderAdminDeleteUserInputUserPoolId: String
# cognitoIdentityServiceProviderAdminDeleteUserInputUsername: String
# registeredUsers_Mutation_DeleteRegisteredUser_Input_DisplayName: String
input CreateErrorInput {
  sequenceNumber: Int!
  type: String!
  action: String!
  deleteS3ObjectInputBucket: String
  deleteS3ObjectInputKey: String
  deleteS3ObjectInputVersionId: String
  screens_Mutation_ChangePosterId_Input_PosterId: String
  cognitoIdentityServiceProviderAdminDeleteUserInputUserPoolId: String
  cognitoIdentityServiceProviderAdminDeleteUserInputUsername: String
  registeredUsers_Mutation_DeleteRegisteredUser_Input_DisplayName: String
}

input DeleteErrorInput {
  id: ID!
  sequenceNumber: Int!
}

input GetIdSequenceNumberDatasInput {
  type: String!
}

type IdSequenceNumber {
  id: ID
  sequenceNumber: Int
}

type IdSequenceNumberData {
  id: ID
  sequenceNumber: Int
  data: String
}

type IdSequenceNumberDatas {
  idSequenceNumberDatas: [IdSequenceNumberData]
}

type Mutation {
  createError(input: CreateErrorInput!): IdSequenceNumber
  deleteError(input: DeleteErrorInput!): IdSequenceNumber
}

type Query {
  getIdSequenceNumberDatas(
    input: GetIdSequenceNumberDatasInput!
  ): IdSequenceNumberDatas
}

type Type {
  type: String
}

schema {
  query: Query
  mutation: Mutation
}
