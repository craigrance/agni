# id: ID
# createdDate: (Number)
# type: String
# action: String!
# deleteS3ObjectInputBucket: String
# deleteS3ObjectInputKey: String
# deleteS3ObjectInputVersionId: String
# screens_Mutation_ChangePosterId_Input_PosterId: String
# cognitoIdentityServiceProviderAdminDeleteUserInputUserPoolId: String
# cognitoIdentityServiceProviderAdminDeleteUserInputUsername: String
# registeredUsers_Mutation_DeleteRegisteredUser_Input_DisplayName: String
input CreateErrorInput {
  type: String!
  action: String!
  deleteS3ObjectInputBucket: String
  deleteS3ObjectInputKey: String
  deleteS3ObjectInputVersionId: String
  screens_Mutation_ChangePosterId_Input_PosterId: String
  cognitoIdentityServiceProviderAdminDeleteUserInputUserPoolId: String
  cognitoIdentityServiceProviderAdminDeleteUserInputUsername: String
  registeredUsers_Mutation_DeleteRegisteredUser_Input_DisplayName: String
}

input DeleteErrorInput {
  id: ID!
}

input GetDatasInput {
  action: String!
}

type Id {
  id: ID
}

type Data {
  id: ID
  deleteS3ObjectInputBucket: String
  deleteS3ObjectInputKey: String
  deleteS3ObjectInputVersionId: String
  screens_Mutation_ChangePosterId_Input_PosterId: String
  cognitoIdentityServiceProviderAdminDeleteUserInputUserPoolId: String
  cognitoIdentityServiceProviderAdminDeleteUserInputUsername: String
  registeredUsers_Mutation_DeleteRegisteredUser_Input_DisplayName: String
}

type Datas {
  datas: [Data]
}

type Mutation {
  createError(input: CreateErrorInput!): Id
  deleteError(input: DeleteErrorInput!): Id
}

type Query {
  getDatas(input: GetDatasInput!): Datas
}

type Type {
  type: String
}

schema {
  query: Query
  mutation: Mutation
}
