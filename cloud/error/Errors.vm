.
## Resolver for Mutation.createError
#set($id = ${util.autoId()})
#set($createdDate = ${util.time.nowEpochMilliSeconds()})
#set($type = ${context.arguments.input.type})
#set($action = ${context.arguments.input.action})
#if($action == "deleteS3Object")
  #set($deleteS3ObjectInputBucket = ${context.arguments.input.deleteS3ObjectInputBucket})
  #set($deleteS3ObjectInputKey = ${context.arguments.input.deleteS3ObjectInputKey})
  #set($deleteS3ObjectInputVersionId = ${context.arguments.input.deleteS3ObjectInputVersionId})
#end
{
  "version": "2017-02-28",
  "operation": "PutItem",
  "key": {
    "id": { "S": "$id" }
  },
  "attributeValues": {
    "createdDate": { "N": $createdDate },
    "type": { "S": "$type" },
    "action": { "S": "$action" },
    #if($action == "deleteS3Object")
      "deleteS3ObjectInputBucket": { "S": "$deleteS3ObjectInputBucket" },
      "deleteS3ObjectInputKey": { "S": "$deleteS3ObjectInputKey" },
      "deleteS3ObjectInputVersionId": { "S": "$deleteS3ObjectInputVersionId" }
    #end
  }
}

${util.toJson(${context.result})}

## Resolver for Mutation.deleteError
#set($id = ${context.arguments.input.id})
{
  "version": "2017-02-28",
  "operation": "DeleteItem",
  "key": {
    "id": { "S": "$id" }
  }
}

${util.toJson(${context.result})}

## Resolver for Query.getDatas
#set($action = ${context.arguments.input.action})
#set($limit = ${context.arguments.input.limit})
## #set($createdDateMargin = 86400000)
#set($createdDateMargin = 1)
#set($currentDate = ${util.time.nowEpochMilliSeconds()})
#set($createdDateLimit = $currentDate - $createdDateMargin)
{
  "version": "2017-02-28",
  "operation": "Query",
  "index": "action-index",
  "limit": $limit,
  "filter": {
    "expression": "createdDate < :createdDateLimit",
    "expressionValues": {
      ":createdDateLimit": { "N": $createdDateLimit }
    }
  },
  "query": {
    "expression": "#action = :action",
    "expressionNames": {
      "#action": "action"
    },
    "expressionValues": {
      ":action": { "S": "$action" }
    }
  }
}

{
  "datas": ${utils.toJson(${context.result.items})}
}