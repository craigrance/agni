## Resolver for Mutation.createRegisteredUser
#set($displayName = ${context.arguments.input.displayName})
#set($createdDate = ${util.time.nowEpochMilliSeconds()})
#set($accountName = ${context.arguments.input.accountName})
#set($profile = ${context.arguments.input.profile})
#set($postScreenCountStartDate = 0)
#set($postScreenCount = 0)
#set($status = "init")
{
  "version": "2017-02-28",
  "operation": "PutItem",
  "key": {
    "displayName": { "S": "$displayName" }
  },
  "attributeValues": {
    "createdDate": { "S": "$createdDate" },
    "accountName": { "S": "$accountName" },
    "profile": { "S": "$profile" },
    "postScreenCountStartDate": { "N": $postScreenCountStartDate },
    "postScreenCount": { "N": $postScreenCount },
    "status": { "S": "$status" }
  },
  "condition": {
    "expression": "attribute_not_exists(displayName)"
  }
}

${util.toJson(${context.result})}

## Resolver for Mutation.setCognitoIdentityId
## begin
#set($region = "ap-northeast-1")
#set($UUIDPattern = "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}")
#set($cognitoIdentityIdPattern = $region + ":" + $UUIDPattern)
#set($cognitoIdentityIdIsValid = $util.matches($cognitoIdentityIdPattern, ${context.arguments.input.cognitoIdentityId}))
$util.quiet($context.stash.put("accountName", ${context.identity.username}))
$util.quiet($context.stash.put("cognitoIdentityIdIsValid", $cognitoIdentityIdIsValid))
$util.quiet($context.stash.put("cognitoIdentityId", ${context.arguments.input.cognitoIdentityId}))
{}

#set($cognitoIdentityId = ${context.stash.cognitoIdentityId})
{
  "version": "2017-02-28",
  "operation": "Query",
  "index": "cognitoIdentityId-index",
  "query": {
    "expression": "cognitoIdentityId = :cognitoIdentityId",
    "expressionValues": {
      ":cognitoIdentityId": { "S": "$cognitoIdentityId" }
    }
  }
}

$util.toJson($context.result)

#set($cognitoIdentityIds = ${context.prev.result.items})
#if(!${cognitoIdentityIds.isEmpty()} || !${context.stash.cognitoIdentityIdIsValid})
  #set($accountName = ${context.stash.accountName})
  #set($displayName = ${accountName.substring(96)})
  {
    "version": "2017-02-28",
    "operation": "DeleteItem",
    "key": {
      "displayName": { "S": "$displayName" }
    }
  }
  $util.error("Error")
#else
  #set($accountName = ${context.stash.accountName})
  #set($displayName = ${accountName.substring(96)})
  #set($cognitoIdentityId = ${context.stash.cognitoIdentityId})
  {
    "version": "2017-02-28",
    "operation": "UpdateItem",
    "key": {
      "displayName": { "S": "$displayName" }
    },
    "update": {
      "expression": "SET cognitoIdentityId = :cognitoIdentityId",
      "expressionValues": {
        ":cognitoIdentityId": { "S": "$cognitoIdentityId" }
      }
    }
  }

  ${util.toJson(${context.result})}
#end
## end
#set($accountName = ${context.identity.username})
#set($displayName = ${accountName.substring(96)})
#set($cognitoIdentityId = ${context.arguments.input.cognitoIdentityId})
{
  "version": "2017-02-28",
  "operation": "UpdateItem",
  "key": {
    "displayName": { "S": "$displayName" }
  },
  "update": {
    "expression": "SET cognitoIdentityId = :cognitoIdentityId",
    "expressionValues": {
      ":cognitoIdentityId": { "S": "$cognitoIdentityId" }
    }
  }
}

${util.toJson(${context.result})}

## Resolver for Mutation.deleteRegisteredUser
#set($displayName = ${context.arguments.input.displayName})
{
  "version": "2017-02-28",
  "operation": "DeleteItem",
  "key": {
    "displayName": { "S": "$displayName" }
  }
}

${util.toJson(${context.result})}

## Resolver for Mutation.prepareSetPostScreenCount
#set($displayName = ${context.arguments.input.displayName})
#set($zero = 0)
#set($postScreenCountPeriod = 86400000)
#set($currentDate = ${util.time.nowEpochMilliSeconds()})
#set($postScreenCountStartDateLimit = $currentDate - $postScreenCountPeriod)
{
  "version": "2017-02-28",
  "operation": "UpdateItem",
  "key": {
    "displayName": { "S": "$displayName" }
  },
  "update": {
    "expression": "SET postScreenCount = :zero",
    "expressionValues": {
      ":zero": { "N": $zero }
    }
  },
  "condition": {
    "expression": "postScreenCountStartDate < :postScreenCountStartDateLimit",
    "expressionValues": {
      ":postScreenCountStartDateLimit": { "N": $postScreenCountStartDateLimit }
    }
  }
}

${util.toJson(${context.result})}

## Resolver for Mutation.setPostScreenCount
#set($displayName = ${context.arguments.input.displayName})
#set($postScreenCount = ${context.arguments.input.postScreenCount})
#set($currentDate = ${util.time.nowEpochMilliSeconds()})
#set($one = 1)
{
  "version": "2017-02-28",
  "operation": "UpdateItem",
  "key": {
    "displayName": { "S": "$displayName" }
  },
  "update": {
    #if($postScreenCount == 0)
      "expression": "SET postScreenCountStartDate = :currentDate, postScreenCount = postScreenCount + :one",
      "expressionValues": {
        ":currentDate": { "N": $currentDate },
        ":one": { "N": $one }
      }
    #else
      "expression": "SET postScreenCount = postScreenCount + :one",
      "expressionValues": {
        ":one": { "N": $one }
      }
    #end
  }
}

${util.toJson(${context.result})}

## Resolver for Mutation.setStatus
#set($displayName = ${context.arguments.input.displayName})
#set($status = ${context.arguments.input.status})
{
  "version": "2017-02-28",
  "operation": "UpdateItem",
  "key": {
    "displayName": { "S": "$displayName" }
  },
  "update": {
    "expression": "SET #status = :status",
    "expressionNames": {
      "#status": "status"
    },
    "expressionValues": {
      ":status": { "S": "$status" }
    }
  }
}

${util.toJson(${context.result})}

## Resolver for Query.getDisplayName
#set($displayName = ${context.arguments.input.displayName})
{
  "version": "2017-02-28",
  "operation": "GetItem",
  "key": {
    "displayName": { "S": "$displayName" }
  }
}

${util.toJson(${context.result})}

## Resolver for Query.getCreatedDate
#set($displayName = ${context.arguments.input.displayName})
{
  "version": "2017-02-28",
  "operation": "GetItem",
  "key": {
    "displayName": { "S": "$displayName" }
  }
}

${util.toJson(${context.result})}

## Resolver for Query.getAccountNames
#set($cognitoIdentityId = ${context.arguments.input.cognitoIdentityId})
{
  "version": "2017-02-28",
  "operation": "Query",
  "index": "cognitoIdentityId-index",
  "query": {
    "expression": "cognitoIdentityId = :cognitoIdentityId",
    "expressionValues": {
      ":cognitoIdentityId": { "S": "$cognitoIdentityId" }
    }
  }
}

{
  "accountNames": ${utils.toJson(${context.result.items})}
}

## Resolver for Query.getPostScreenCount
#set($displayName = ${context.arguments.input.displayName})
{
  "version": "2017-02-28",
  "operation": "GetItem",
  "key": {
    "displayName": { "S": "$displayName" }
  }
}

${util.toJson(${context.result})}