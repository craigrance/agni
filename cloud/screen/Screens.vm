## Resolver for Mutation.createScreen
#set($path = ${util.toJson("/screens/_doc/")})
#set($screenName = ${context.arguments.input.screenName})
#set($objectKey = ${context.arguments.input.objectKey})
#set($versionId = ${context.arguments.input.versionId})
#set($createdDate = ${util.time.nowEpochMilliSeconds()})
#set($posterId = ${context.arguments.input.posterId})
#set($type = ${context.arguments.input.type})
#set($labels = ${utils.toJson(${context.arguments.input.labels})})
#set($userCount = 0)
#set($status = "init")
{
  "version": "2017-02-28",
  "operation": "POST",
  "path": $path,
  "params": {
    "headers": {},
    "queryString": {},
    "body": {
      #if($type == "thumbnail")
        "screenName": "$screenName",
        "objectKey": "$objectKey",
        "versionId": "$versionId",
        "createdDate": $createdDate,
        "posterId": "$posterId",
        "type": "$type",
        "labels": $labels,
        "userCount": $userCount,
        "status": "$status"
      #else
        "screenName": "$screenName",
        "objectKey": "$objectKey",
        "versionId": "$versionId",
        "createdDate": $createdDate,
        "type": "$type",
        "status": "$status"
      #end
    }
  }
}

${utils.toJson(${context.result.get("_source")})}

## Resolver for Mutation.changePosterId
#set($path = ${util.toJson("/screens/_update_by_query?conflicts=proceed")})
#set($posterId = ${context.arguments.input.posterId})
#set($changedPosterId = "Anonymous")
{
  "version": "2017-02-28",
  "operation": "POST",
  "path": $path,
  "params": {
    "headers": {},
    "queryString": {},
    "body": {
      "query": { 
        "term": {
          "posterId": "$posterId"
        }
      },
      "script": {
        "inline": "ctx._source.posterId = \"$changedPosterId\""
      }
    }
  }
}

${utils.toJson(${context.result})}

## Resolver for Mutation.setStatus
#set($path = ${util.toJson("/screens/_update_by_query?conflicts=proceed")})
#set($screenName = ${context.arguments.input.screenName})
#set($status = ${context.arguments.input.status})
{
  "version": "2017-02-28",
  "operation": "POST",
  "path": $path,
  "params": {
    "headers": {},
    "queryString": {},
    "body": {
      "query": { 
        "term": {
          "screenName": "$screenName"
        }
      },
      "script": {
        "inline": "ctx._source.status = \"$status\""
      }
    }
  }
}

${utils.toJson(${context.result})}

## Resolver for Mutation.deleteScreen
#set($path = ${util.toJson("/screens/_delete_by_query?conflicts=proceed")})
#set($screenName = ${context.arguments.input.screenName})
{
  "version": "2017-02-28",
  "operation": "POST",
  "path": $path,
  "params": {
    "headers": {},
    "queryString": {},
    "body": {
      "query": {
        "term": {
          "screenName": "$screenName"
        }
      }
    }
  }
}

${utils.toJson(${context.result})}

## begin
## pipeline resolver for Mutation.confirmScreen
## begin
## Before mapping template.
#set($s3FileAccessLevel = "protected")
#set($region = "ap-northeast-1")
#set($UUIDPattern = "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}")
#set($displayNamePattern = "[0-9a-z]{1,}_[0-9a-z]{1,}")
#set($displayNameSuffixPattern = "[0-9]{13,}")
#set($unixTimestampPattern = "[0-9]{13,}")
#set($screenNamePattern = $s3FileAccessLevel + "/" + $region + ":" + $UUIDPattern + "/" + $displayNamePattern + "_" + $displayNameSuffixPattern + "/" + $unixTimestampPattern)
#set($screenNameIsValid = ${util.matches($screenNamePattern, ${context.arguments.input.screenName})})
${util.quiet(${context.stash.put("accountName", ${context.identity.username})})}
${util.quiet(${context.stash.put("screenNameIsValid", $screenNameIsValid)})}
${util.quiet(${context.stash.put("screenName", ${context.arguments.input.screenName})})}
{}

## deleteAccount
{
  "version": "2017-02-28",
  "operation": "Invoke",
  "payload": {
  #if(!${context.stash.screenNameIsValid})
    "accountName": "${context.stash.accountName}"
    ${util.quiet(${context.stash.put("errorExists", true)})}
  #else
    ${util.quiet(${context.stash.put("errorExists", false)})}
    #return
  #end
  }
}

${util.toJson(${context.result})}

## Query_getObjectKeys_Function
#if(${context.stash.errorExists})
  ${util.error("Error")}
#end
#set($path = ${util.toJson("/screens/_search")})
#set($from = 0)
#set($size = 3)
#set($screenName = ${context.stash.screenName})
{
  "version": "2017-02-28",
  "operation": "GET",
  "path": $path,
  "params": {
    "headers": {},
    "queryString": {},
    "body": {
      "from": $from,
      "size": $size,
      "query": {
        "term": {
          "screenName": "$screenName"
        }
      },
      "_source": ["objectKey"]
    }
  }
}

[
  #foreach($entry in ${context.result.hits.hits})
    #if($velocityCount > 1), #end
      ${utils.toJson(${entry.get("_source")})}
  #end
]

## After mapping template.
{
  "objectKeys": ${utils.toJson(${context.prev.result.items})}
}

## end
## end

## Resolver for Query.getObjectKeys
#set($path = ${util.toJson("/screens/_search")})
#if(${context.arguments.input.containsKey("objectKey")})
  #set($from = 0)
  #set($size = 1)
  #set($objectKey = ${context.arguments.input.objectKey})
  #set($screenName = "")
#end
#if(${context.arguments.input.containsKey("screenName")})
  #set($from = 0)
  #set($size = 3)
  #set($objectKey = "")
  #set($screenName = ${context.arguments.input.screenName})
#end
{
  "version": "2017-02-28",
  "operation": "GET",
  "path": $path,
  "params": {
    "headers": {},
    "queryString": {},
    "body": {
      "from": $from,
      "size": $size,
      "query": {
        "term": {
          #if($objectKey != "")
            "objectKey": "$objectKey"
          #end
          #if($screenName != "")
            "screenName": "$screenName"
          #end
        }
      },
      "_source": ["objectKey"]
    }
  }
}

[
  #foreach($entry in ${context.result.hits.hits})
    #if($velocityCount > 1), #end
      ${utils.toJson(${entry.get("_source")})}
  #end
]

## Resolver for Query.getScreenNames
#set($path = ${util.toJson("/screens/_search")})
#set($from = 0)
#set($size = 12)
#set($type = ${context.arguments.input.type})
## #set($createdDateMargin = 86400000)
#set($createdDateMargin = 1)
#set($currentDate = ${util.time.nowEpochMilliSeconds()})
#set($createdDateLimit = $currentDate - $createdDateMargin)
#set($status = ${context.arguments.input.status})
{
  "version": "2017-02-28",
  "operation": "GET",
  "path": $path,
  "params": {
    "headers": {},
    "queryString": {},
    "body": {
      "from": $from,
      "size": $size,
      "query": {
        "bool": {
          "must": [
            {
              "term": {
                "type": "$type"
              }
            },
            {
              "range": {
                "createdDate": {
                  "lt": $createdDateLimit
                }
              }
            },
            {
              "term": {
                "status": "$status"
              }
            }
          ]
        }
      },
      "_source": ["screenName"]
    }
  }
}

[
  #foreach($entry in ${context.result.hits.hits})
    #if($velocityCount > 1), #end
      ${utils.toJson(${entry.get("_source")})}
  #end
]

## Resolver for Query.getVersionIds
#set($path = ${util.toJson("/screens/_search")})
#set($from = 0)
#set($size = 1)
#set($objectKey = ${context.arguments.input.objectKey})
{
  "version": "2017-02-28",
  "operation": "GET",
  "path": $path,
  "params": {
    "headers": {},
    "queryString": {},
    "body": {
      "from": $from,
      "size": $size,
      "query": {
        "term": {
          "objectKey": "$objectKey"
        }
      },
      "_source": ["versionId"]
    }
  }
}

[
  #foreach($entry in ${context.result.hits.hits})
    #if($velocityCount > 1), #end
      ${utils.toJson(${entry.get("_source")})}
  #end
]